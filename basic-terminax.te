//
// Basic Terminax Documentation
//
// Contact: blerg@terminalempire.com
//
// Terminax is the scripting language used by Terminal Empire
// https://www.terminalempire.com

/*
NOTES:
- Terminax code files end with .te, for example the startup script is located at \system\startup.te
- Parameters with * are optional, ie: forecolor, backcolor* when creating a new color style.
- Variable names and function names are not case sensitive, however consistency is encouraged.
- Assigning text doesn't require double quotes "text" in all cases, however it is generally encouraged.
- The x and y position locations that are given to objects is relative to its container window. (unless being drawn outside of a window)

OBJECTS vs STYLES:
There is a distinction between the objects created by different functions.
OBJECT EXAMPLES: window, text, button, image, input
STYLE EXAMPLES: font, color, border
Both of these are created by functions, and returned into variables that link to the object or style.
Styles are typically assigned to objects using $someObject.someProperty = $someStyle
(Dev note - All OBJECTS use the EngineObject class. STYLES use their own distinct classes.
*/



// STYLE: FONTS
// Supported fonts names are provided in json.
// Parameters Option: name, size
$someFont = font("Play-Bold",14)

// STYLE: COLORS
// Color objects have a base color and a secondary color, which when assigned to objects
// will be used as a forecolor and backcolor.
// Parameters Option: forecolor
// Parameters Option: forecolor, backcolor*
$someColor1 = color(blue)
$someColor2 = color("blue")
$someColor3 = color(#000, #EEE)

// STYLE: BORDERS
// Border function supports adding multiple border layers,
// where the border layers are drawn outwards from the object that the border is assigned to.
// Parameters Option: color, thickness
// Parameters Option: color, thickness, color, thickness ... (repeat if required)
$someBorder1 = border(green, 2) // a border with 1 layer, green and 2px thick
$someBorder2 = border(green, 2, blue, 4) // a border with 2 layers, green 2px, and a second thicker blue layer around it.length
$someBorder3 = border($someColor1, 4, $someColor2, 4) // a border with 2 layers, green 2px, and a second thicker blue layer around it.length


// OBJECT: WINDOW
// Parameters Option: x, y, width, height
$myWindow = window(100, 100, 500, 400)
$myWindow.border = $someBorder1 // assign a border to the object


// OBJECT: TEXT
// Create a text area.
// Parameters Option: text, x, y, width, height
// Parameters Option: text, x, y, [keyword], [keyword]
$myText = text("Hello, stranger!", 100, 100, 500, 400)
$myText.color = $someColor1 // assign a color to the object, this can change both the text color (forecolor) and back color at the same time.



// NEGATIVE VALUES FOR OBJECT POSITIONS
// x = 10 will place the object 10 px away from the left side
// x = -10 will place the object 10 px away from the right side
// y = 10 will place the object 10 px away from the top side
// y = -10 will place the object 10 px away from the bottom side

// NEGATIVE VALUES FOR OBJECT SIZES
// width = 100 will set a width of 100 for the object
// width = -20 will set a width of the object to the maximum allowed (based on its window container), minus 20 from the right side.
// height = 80 will set a height of 80 for the object
// width = -40 will set a width of the object to the maximum allowed (based on its window container), minus 40 from the bottom side.




// OBJECT: BUTTON
// Parameters Option: title, x, y, width, height
$myButton = button("Click me asap!", 100, 100, 500, 400)
$myButton.border = $someBorder1 // assign a border to the object
$myButton.color = $someColor1 // assign a color to the object, this can change both the text color (forecolor) and back color at the same time.

// ADDITIONAL PROPERTY EXAMPLES
myButton.x = 100
myButton.y = 50
myButton.width = 200
myButton.height = 100

// THESE CAN ALSO BE ASSIGNED USING VARIABLES
$newXposition = 100
myButton.x = $newXposition

// STARTING OBJECTS AS INVIBLSE
// By adding a * at the end of an object creation line,
// you can start the object invisible, but still have it load in the background.
$myWindow = window(40,40,300,200)*
// Think of * as saying 'hold off on showing this for now'
// You can set the object to visible when ready, using either of:
$myWindow.show
$myWindow.visible = true
// This also works for other objects in the same way
$myButton = button("Click me asap!", 100, 100, 500, 400) // Start with VISIBLE object
$myButton = button("Click me asap!", 100, 100, 500, 400)* // Start with INVISIBLE object

// CUSTOM FUNCTIONS
// Custom functions can be creted with the following structure:
function add {
  $sum = $1 + $2
  return $sum
}

// This is also valid, however the () are not required:
function add() {
  $sum = $1 + $2
  return $sum
}

// Custom functions do not require predefining the parameters that are passed to them.
// However, any number of parameters may be passed to a custom function.
// These parameters are easily accessible from within the function
// by referencing the variable names $1, $2 ... $n as needed.

// You can add short descriptions to custom functions
// with inline comments as follows:
function add{ // add two numbers
  $sum = $1 + $2
  return $sum
}
// Comments added to custom functions in this way will 
// automatically be seen as a 'short description' of your function, and treated as such.

// Using custom functions
$someVariable = add(5,10) // this will put 15 into $someVariable
$someObject.text = Solution is $someVariable
// or
// call a function directly into an object property.
$someObject.someProperty = some_function($someParam, $someParam2)

// OBJECT EVENTS
// Custom functions can be made to trigger on certain player actions.
// Multiple custom functions can be set to the same trigger events.

// Events are assigned to objects using the > operator,
// which links them up to be activated later.

function randomize(){ // generate a random numer
    $randomnum = random(1,1000)
    // now we can do something with it
}


// Valid events for some objects (like windows, button and text objects)

// Right Mouse Button
// (.click and .mouseup are effectively the same)
$someObject.click > randomize()
$someObject.mousedown > randomize()
$someObject.mouseup > randomize()
$someObject.doubleclick > randomize()

// Similar events exist for the l
$someObject.mousedown_right > randomize()
$someObject.mouseup_right > randomize()
$someObject.doubleclick_right > randomize()

// These are both valid, assuming no parameters are required.
$someObject.click > randomize()
$someObject.click > randomize

//You can also pass variables or values:
function randomize_custom(){ // generate a random numer
    $min = $1
    $max = $2
    $randomnum = random($min,$max)
    // now we can do something with it
{

// These parameters are then collected from within the custom function
// by referencing $1 and $2
$someObject.click > randomize_custom(50,100)


